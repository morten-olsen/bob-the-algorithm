{"version":3,"sources":["src/features/appointments/context.ts","src/features/async/hooks.ts","src/features/appointments/provider.tsx","src/features/day/context.ts","src/features/day/utils.ts","src/features/day/provider.tsx","src/features/day/hooks.ts","src/utils/data-context.tsx","src/features/goals/context.ts","src/features/location/context.ts","src/features/location/provider.tsx","src/features/location/hooks.ts","src/features/overrides/context.ts","src/features/overrides/provider.tsx","src/features/overrides/hooks.ts","src/features/data/types.ts","src/features/data/utils.ts","src/features/planner/algorithm/utils.ts","src/features/planner/algorithm/get-next.ts","src/features/planner/algorithm/build-graph.ts","src/features/planner/context.ts","src/features/routines/context.ts","src/features/routines/hooks.ts","src/features/goals/hooks.ts","src/features/planner/algorithm/construct-day.ts","src/features/planner/hooks.ts","src/features/appointments/hooks.ts","src/features/setup.tsx","src/features/tasks/hooks.tsx","src/ui/containers/tasks/group.tsx","src/ui/screens/day/index.tsx","src/ui/screens/task/add.tsx","src/ui/screens/more/index.tsx","src/ui/screens/locations/list.tsx","src/ui/screens/locations/set.tsx","src/ui/screens/task/list.tsx","src/ui/screens/task/overrides.tsx","src/ui/containers/plan/day/task.tsx","src/ui/containers/plan/day/index.tsx","src/ui/screens/plan/index.tsx","src/ui/router/router.tsx","src/index.ts","src/app.tsx"],"names":["AppointmentsStatus","useAsyncCallback","fn","deps","useState","result","setResult","prevArgs","setPrevArgs","loading","setLoading","error","setError","action","useCallback","invoke","a","async","args","output","undefined","useMemo","useAsync","options","useEffect","localOptions","rerun","AppointmentsContext","createContext","AppointmentsProvider","children","Platform","OS","status","unavailable","value","Provider","DateContext","dateToDay","input","year","getFullYear","month","getMonth","date","getDate","dayUtils","today","Date","dayToDate","day","toId","toString","padStart","DateProvider","setDate","useDate","useContext","createDataContext","createDefault","deserialize","Context","key","storageKey","current","setCurrent","next","AsyncStorageLib","setItem","JSON","stringify","setData","getItem","raw","parse","data","GoalsContext","GoalsProvider","LocationContext","LocationProvider","lookup","getTransition","locations","setLocations","AsyncStorage","location","index","id","set","remove","useLocations","Object","values","OverrideContext","OverrideProvider","currentDate","overrides","setOverrides","get","StorageKey","tasks","override","TaskType","largerThan","b","timeToMinutes","time","hour","minute","timeUtils","timeToString","stringToTime","split","map","trim","filter","Boolean","hourPart","minutePart","parseInt","Number","isInteger","isNaN","equal","timeToDate","max","add","minutes","toAdd","Math","floor","locationEqual","title","listContainLocation","list","target","find","l","getRemainingLocations","forEach","task","push","Strategies","isDead","impossible","t","required","getImpossible","remaining","startTime","calculateScore","transition","score","priority","getNext","currentNode","context","nextNodes","remainingLocations","remainingTasks","Promise","all","end","endTime","parent","to","impossibeTasks","completed","dead","start","possibleTasks","orgTask","min","parentRemainging","duration","length","sleep","resolve","setTimeout","fil","Array","fill","i","buildGraph","strategy","allValid","callback","batchSize","sleepTime","nodeCount","running","leafList","completedList","deadList","complete","nodes","sort","node","pop","cancel","n","alive","firstValid","firstComplet","fullComplete","c","PlannerContext","PlannerProvider","RoutinesContext","RoutinesProvider","useRoutines","useGoals","constructDay","plans","type","name","from","reverse","getDays","stopDate","days","firstValue","arg","usePreparePlan","routines","goals","getOverrides","approved","getDay","appointments","useGetAppointments","getAppontments","enabled","startMin","startMax","usePlan","preparePlan","prepareOptions","prepared","reduce","update","dayGoal","graph","winner","plan","goal","d","Setup","getTransit","useTasks","useAppointments","routine","appointment","useSetTask","setRoutine","useSetRoutine","setGoal","useSetGoals","useRemoveTask","removeRoutine","useRemoveRoutine","removeGoal","useRemoveGoal","TaskGroup","navigate","useNavigation","items","getKey","render","onPress","Wrapper","styled","View","Content","ScrollView","DayScreen","appointmentStatus","startTimeOverride","useSetStartTimeOverride","setStartTimeOverride","selected","onSelect","label","onChange","rejected","SideBySide","dayNames","_","TaskAddScreen","useRoute","params","goBack","nanoid","currentId","setTask","currentType","setCurrentType","setTitle","maxStart","setMaxStart","minStart","setMinStart","setDuration","hasLocation","setHasLocation","selectedLocations","setSelectedLocations","hasDays","setHasDays","selectedDays","setSelectedDays","setRequired","save","onClose","onChangeText","flex","right","startHidden","setEnabled","disabledText","enabledText","MoreScreen","LocationListScreen","removeLocation","item","LocationSetScreen","setLocation","position","longitute","latitude","TaskListScreen","removeTask","OverrideSetScreen","useSetTaskOverride","setOverride","useClearTaskOverride","clearOverrides","clear","placeholder","Touch","Text","background","height","chroma","darken","hex","TouchableOpacity","PlanDayTask","view","stringToColor","luminance","saturate","brighten","join","PlanDay","Scroll","Horizontal","FlexDateSelector","DateSelector","PlanScreen","setStart","setEnd","runPlanning","entries","MoreStackNavigator","createNativeStackNavigator","MoreStack","Navigator","Screen","component","MainTabsNvaigator","createBottomTabNavigator","MainTabs","theme","useTheme","screenOptions","tabBarActiveTintColor","colors","primary","headerShown","tabBarLabel","tabBarIcon","focused","color","RootNavigator","createStackNavigator","Root","animationEnabled","Group","presentation","Router","baseTheme","DefaultTheme","navigationTheme","shade","card","text","NavigationContainer","registerRootComponent","usableTime","StatusBar"],"mappings":"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","file":"static/js/app.16683bef.chunk.js","sourcesContent":["import { createContext } from \"react\"\nimport { Appointment } from \"../data\"\nimport { Day } from \"../day\"\n\nenum AppointmentsStatus {\n  unavailable = 'unavailable',\n  unapproved = 'unapproved',\n  rejected = 'rejected',\n  approved = 'approved',\n}\n\ntype AppointmentsContextUnavailable = {\n  status: AppointmentsStatus.unavailable | AppointmentsStatus.rejected;\n}\n\ntype AppointmentsContextUnapprovedValue = {\n  status: AppointmentsStatus.unapproved;\n  request: () => Promise<void>;\n}\n\ntype AppointmentsContextApproved = {\n  status: AppointmentsStatus.approved;\n  getDay: (day: Day) => Promise<Appointment[]>\n}\n\ntype AppointmentsContextValue = AppointmentsContextUnavailable\n  | AppointmentsContextUnapprovedValue\n  | AppointmentsContextApproved;\n\nconst AppointmentsContext = createContext<AppointmentsContextValue>(undefined as any);\n\nexport type {\n  AppointmentsContextValue,\n};\nexport { AppointmentsContext, AppointmentsStatus };\n","import { useCallback, useEffect, useMemo, useState } from \"react\"\n\ntype AsyncCallbackOutput<TArgs extends any[], TResult> = [\n  (...args: TArgs) => Promise<TResult>,\n  {\n    loading: boolean;\n    error?: any;\n    result?: TResult;\n    args?: TArgs;\n  }\n];\n\ntype AsyncOutput<TResult> = [\n  TResult | undefined,\n  {\n    loading: boolean;\n    error?: any;\n    rerun: () => Promise<TResult>;\n  }\n]\n\nconst useAsyncCallback = <\n  TArgs extends any[],\n  TResult,\n>(fn: (...args: TArgs) => Promise<TResult>, deps: any[]): AsyncCallbackOutput<TArgs, TResult> => {\n  const [result, setResult] = useState<TResult>();\n  const [prevArgs, setPrevArgs] = useState<TArgs>();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<any>();\n\n  const action = useCallback(fn, deps);\n  \n  const invoke = useCallback(\n    async (...args: TArgs) => {\n      setLoading(true);\n      setError(false);\n      setPrevArgs(args);\n      try {\n        const output = await action(...args);\n        setResult(output);\n        return output;\n      } catch (err) {\n        setResult(undefined);\n        setError(err);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [setLoading, setError, setResult, action, ...deps],\n  );\n\n  const options = useMemo(\n    () => {\n      const output: AsyncCallbackOutput<TArgs, TResult> = [\n        invoke,\n        {\n          result,\n          loading,\n          error,\n          args: prevArgs,\n        }\n      ];\n      return output;\n    },\n    [invoke, result, loading, error, prevArgs, ...deps],\n  );\n\n  return options;\n};\n\nconst useAsync = <TResult>(fn: () => Promise<TResult>, deps: any[]): AsyncOutput<TResult> => {\n  const [invoke, options] = useAsyncCallback(fn, deps);\n  useEffect(\n    () => {\n      invoke();\n    },\n    [invoke],\n  );\n\n  const localOptions = useMemo(\n    () => ({\n      loading: options.loading,\n      error: options.error,\n      rerun: invoke,\n    }),\n    [invoke, options.loading, options.error],\n  );\n\n  return [\n    options.result,\n      localOptions,\n  ]\n};\n\nexport type { AsyncCallbackOutput };\nexport { useAsync, useAsyncCallback };\n","import { useAsync } from \"#/features/async\";\nimport { ReactNode } from \"react\"\nimport { Platform } from \"react-native\";\nimport { AppointmentsContext, AppointmentsContextValue, AppointmentsStatus } from './context';\n\ntype AppointmentsProviderProps = {\n  children: ReactNode;\n};\n\nconst AppointmentsProvider: React.FC<AppointmentsProviderProps> = ({\n  children,\n}) => {\n  const [value] = useAsync<AppointmentsContextValue>(\n    async () => {\n      if (Platform.OS !== 'ios') {\n        return { status: AppointmentsStatus.unavailable };\n      }\n      return { status: AppointmentsStatus.unavailable };\n    },\n    [],\n  );\n\n  if (!value) {\n    return <></>\n  }\n\n  return (\n    <AppointmentsContext.Provider value={value}>\n      {children}\n    </AppointmentsContext.Provider>\n  );\n}\n\nexport type { AppointmentsProviderProps };\nexport { AppointmentsProvider };\n","import { createContext } from \"react\";\nimport { Day } from \".\";\n\ntype DateContextValue = {\n  date: Day;\n  setDate: (date: Day) => void;\n}\n\nconst DateContext = createContext<DateContextValue>(undefined as any);\n\nexport type { DateContextValue };\nexport { DateContext }\n","import { Day } from \"./day\";\n\nconst today = () => {\n  return dateToDay(new Date());\n}\n\nconst dayToDate = (day: Day) => {\n  return new Date(day.year, day.month - 1, day.date, 0, 0, 0, 0);\n}\n\nconst dateToDay = (input: Date) => {\n  const year = input.getFullYear();\n  const month = input.getMonth() + 1;\n  const date = input.getDate();\n  const day: Day = { year, month, date };\n  return day;\n}\n\nconst toId = (day: Day) => {\n  return `${day.year.toString().padStart(4, '0')}-${day.month.toString().padStart(2, '0')}-${day.date.toString().padStart(2, '0')}`;\n}\n\nconst dayUtils = {\n  today,\n  dateToDay,\n  dayToDate,\n  toId,\n};\n\nexport { dayUtils };\n","import { ReactNode, useState } from \"react\";\nimport { DateContext } from \"./context\";\nimport { dayUtils } from \"./utils\";\n\ntype DateProviderProps = {\n  children: ReactNode;\n};\n\nconst DateProvider: React.FC<DateProviderProps> = ({ children }) => {\n  const [date, setDate] = useState(dayUtils.today());\n\n  return (\n    <DateContext.Provider value={{ date, setDate }}>\n      {children}\n    </DateContext.Provider>\n  );\n}\n\nexport type { DateProviderProps };\nexport { DateProvider };\n","import { useContext } from \"react\"\nimport { DateContext } from \"./context\"\n\nexport const useDate = () => {\n  const { date } = useContext(DateContext);\n  return date;\n}\n\nexport const useSetDate = () => {\n  const { setDate } = useContext(DateContext);\n  return setDate;\n}\n","import { useAsync, useAsyncCallback } from \"#/features/async\";\nimport AsyncStorageLib from \"@react-native-async-storage/async-storage\";\nimport { createContext, ReactNode, useState } from \"react\"\n\ntype DataContextOptions<T> = {\n  createDefault: () => T;\n  deserialize?: (item: T) => T;\n};\n\ntype DataContextProviderProps = {\n  storageKey: string;\n  children: ReactNode;\n};\n\nfunction createDataContext<T extends {[name: string]: any}>({\n  createDefault,\n  deserialize = a => a,\n}: DataContextOptions<T>) {\n  const Context = createContext<{\n    data: T;\n    setData: (data: T | ((current: T) => T)) => Promise<void>;\n  }>(undefined as any);\n\n  const Provider: React.FC<DataContextProviderProps> = ({\n    storageKey: key,\n    children,\n  }) => {\n    const [current, setCurrent] = useState<T>();\n\n    const [setData] = useAsyncCallback(\n      async (input: T | ((current: T) => T)) => {\n        let next = typeof input === 'function'\n          ? input(current!)\n          : input;\n        setCurrent(next);\n        await AsyncStorageLib.setItem(key, JSON.stringify(next));\n      },\n      [key, current, setCurrent],\n    );\n\n    useAsync(\n      async () => {\n        const raw = await AsyncStorageLib.getItem(key);\n        const next = raw ? deserialize(JSON.parse(raw)) : createDefault();\n        setCurrent(next);\n      },\n      [key, setCurrent],\n    )\n\n    if (!current) {\n      return <></>\n    }\n\n    return (\n      <Context.Provider value={{ data: current, setData }}>\n        {children}\n      </Context.Provider>\n    )\n  };\n\n  return { Context, Provider };\n}\n\nexport { createDataContext };\n","import { createDataContext } from \"#/utils/data-context\";\nimport { Goal } from \"../data\";\n\nconst {\n  Context: GoalsContext,\n  Provider: GoalsProvider,\n}= createDataContext<{[id: string]: Goal}>({\n  createDefault: () => ({}),\n})\n\nexport { GoalsContext, GoalsProvider };\n","import { Time, UserLocation } from \"../data\";\nimport { createContext } from \"react\"\n\ntype Transition = {\n  time: number;\n  usableTime: number;\n  to: UserLocation;\n  from: UserLocation;\n};\n\ntype GetTransition = (\n  from: UserLocation,\n  to: UserLocation,\n  time: Time,\n) => Promise<Transition>;\n\ntype LocationContextValue = {\n  locations: {\n    [id: string]: UserLocation;\n  };\n  set: (location: UserLocation) => any;\n  remove: (id: string) => any;\n  lookup?: (address: string) => UserLocation[];\n  getTransition: GetTransition;\n}\n\nconst LocationContext = createContext<LocationContextValue>(undefined as any);\n\nexport type { LocationContextValue, GetTransition, Transition };\nexport { LocationContext };\n","import { useAsync, useAsyncCallback } from \"#/features/async\";\nimport { GetTransition } from \"./context\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ReactNode, useState } from \"react\";\nimport { LocationContext } from \"./context\";\nimport { UserLocation } from \"../data\";\n\ntype LocationProviderProps = {\n  children: ReactNode;\n  lookup: (address: string) => UserLocation[];\n  getTransition: GetTransition;\n}\n\nconst LOCATION_STORAGE_KEY = 'locations';\n\nconst LocationProvider: React.FC<LocationProviderProps> = ({\n  children,\n  lookup,\n  getTransition,\n}) => {\n  const [locations, setLocations] = useState<{[id: string]: UserLocation}>({});\n\n  useAsync(\n    async () => {\n      const raw = await AsyncStorage.getItem(LOCATION_STORAGE_KEY);\n      if (raw) {\n        setLocations(JSON.parse(raw));\n      }\n    },\n    [],\n  );\n\n  const [set] = useAsyncCallback(\n    async (location: UserLocation) => {\n      const index = {\n        ...locations,\n        [location.id]: location,\n      }\n      setLocations(index);\n      await AsyncStorage.setItem(LOCATION_STORAGE_KEY, JSON.stringify(index));\n    },\n    [setLocations, locations],\n  )\n\n  const [remove] = useAsyncCallback(\n    async (id: string) => {\n      const index = {\n        ...locations,\n      }\n      delete index[id];\n      setLocations(index);\n      await AsyncStorage.setItem(LOCATION_STORAGE_KEY, JSON.stringify(index));\n    },\n    [setLocations, locations],\n  );\n\n  return (\n    <LocationContext.Provider\n      value={{\n        locations,\n        set,\n        remove,\n        lookup,\n        getTransition,\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  )\n}\n\nexport type { LocationProviderProps };\nexport { LocationProvider };\n","import { useAsync } from \"#/features/async\";\nimport { useContext, useMemo } from \"react\"\nimport { requestForegroundPermissionsAsync, getCurrentPositionAsync } from 'expo-location';\nimport { LocationContext } from \"./context\"\nimport { UserLocation } from \"../data\";\nimport { getDistanceFromLatLonInKm } from \"./utils\";\n\nexport const useLocations = () => {\n  const { locations } = useContext(LocationContext);\n  const result = useMemo(() => Object.values(locations), [locations]);\n  return result;\n}\n\nexport const useSetLocation = () => {\n  const { set } = useContext(LocationContext);\n  return set;\n}\n\nexport const useRemoveLocation = () => {\n  const { remove } = useContext(LocationContext);\n  return remove;\n}\n\nexport const useGetTransition = () => {\n  const { getTransition } = useContext(LocationContext);\n  return getTransition;\n}\n\nexport const useLookup = () => {\n  const { lookup } = useContext(LocationContext);\n  return lookup;\n}\n\nexport const useCurrentLocation = (proximity: number = 0.5) => {\n  const { locations } = useContext(LocationContext);\n  const result = useAsync<UserLocation | undefined>(\n    async () => {\n      let { status } = await requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        return undefined;\n      }\n      let position = await getCurrentPositionAsync({});\n      const withDistance = Object.values(locations).map((location) => {\n        if (!location.position) {\n          return;\n        }\n        const distance = getDistanceFromLatLonInKm(\n          position.coords.latitude,\n          position.coords.longitude,\n          location.position.latitude,\n          location.position.longitute,\n        )\n        return {\n          distance,\n          location,\n        }\n      }).filter(Boolean).sort((a, b) => a!.distance - b!.distance)\n      const current = withDistance.find(d => d!.distance < proximity);\n      if (!current) {\n        return {\n          id: `${position.coords.longitude} ${position.coords.latitude}`,\n          title: 'Unknown',\n          position: {\n            latitude: position.coords.latitude,\n            longitute: position.coords.longitude,\n          },\n        };\n      }\n      return current.location;\n    },\n    [],\n  );\n  return result;\n}\n","import { createContext, SetStateAction } from \"react\";\nimport { Time, UserLocation } from \"../data\";\nimport { Day } from \"../day\";\n\ntype Override = {\n  locations?: UserLocation[] | null;\n  startMin?: Time;\n  startMax?: Time;\n  duration?: number;\n  required?: boolean;\n  priority?: number;\n  enabled?: boolean;\n}\n\ntype OverrideIndex = {\n  startTime?: Time;\n  tasks: {\n    [id: string]: Override;\n  };\n};\n\ntype OverrideContextValue = {\n  overrides: OverrideIndex;\n  get: (date: Day) => Promise<OverrideIndex>;\n  set: React.Dispatch<SetStateAction<OverrideIndex>>;\n}\nconst OverrideContext = createContext<OverrideContextValue>(undefined as any);\n\nexport type { Override, OverrideIndex, OverrideContextValue };\nexport { OverrideContext };\n","import AsyncStorageLib from \"@react-native-async-storage/async-storage\";\nimport React, { ReactNode, SetStateAction, useCallback, useState } from \"react\";\nimport { useAsync } from \"../async\";\nimport { Day, useDate, dayUtils } from \"../day\";\nimport { Override, OverrideContext, OverrideIndex } from \"./context\";\n\ntype OverrideProviderProps = {\n  children: ReactNode;\n}\n\nconst StorageKey = 'overrides';\n\nconst OverrideProvider: React.FC<OverrideProviderProps> = ({ children }) => {\n  const currentDate = useDate();\n  const [overrides, setOverrides] = useState<OverrideIndex>();\n\n  const get = useCallback(\n    async (date: Day): Promise<OverrideIndex> => {\n      const raw = await AsyncStorageLib.getItem(`${StorageKey}_${dayUtils.toId(date)}`);\n      if (!raw) {\n        return { tasks: {} };\n      }\n      return JSON.parse(raw);\n    },\n    [],\n  );\n\n  const set = useCallback(\n    async (override: SetStateAction<OverrideIndex>) => {\n      const next = typeof override === 'function' ? override(overrides!) : overrides;\n      setOverrides(next);\n      await AsyncStorageLib.setItem(\n        `${StorageKey}_${dayUtils.toId(currentDate)}`,\n        JSON.stringify(next),\n      );\n    },\n    [currentDate, overrides],\n  );\n\n  useAsync(\n    async () => {\n      setOverrides(await get(currentDate));\n    },\n    [currentDate, setOverrides],\n  );\n\n  if (!overrides) {\n    return <></>\n  }\n\n  return (\n    <OverrideContext.Provider value={{ overrides, get, set }}>\n      {children}\n    </OverrideContext.Provider>\n  );\n}\n\nexport type { OverrideProviderProps };\nexport { OverrideProvider };\n","import { useContext } from \"react\"\nimport { useAsyncCallback } from \"../async\";\nimport { Time } from \"../data\";\nimport { Override, OverrideContext } from \"./context\"\n\nexport const useOverrides = () => {\n  const { overrides } = useContext(OverrideContext);\n  return overrides;\n}\n\nexport const useSetOverride = () => {\n  const { set } = useContext(OverrideContext);\n  return set;\n}\n\nexport const useGetOverride = () => {\n  const { get } = useContext(OverrideContext);\n  return get;\n}\n\nexport const useSetTaskOverride = () => {\n  const { set } = useContext(OverrideContext);\n  const setTaskOverride = useAsyncCallback(\n    async (id: string, overrides: Override) => {\n      set(current => ({\n        ...current,\n        tasks: {\n          ...current.tasks,\n          [id]: overrides,\n        },\n      }));\n    },\n    [set],\n  );\n  return setTaskOverride;\n}\n\nexport const useClearTaskOverride = () => {\n  const { set } = useContext(OverrideContext);\n  const clearTaskOverride = useAsyncCallback(\n    async (id: string) => {\n      set(current => {\n        const tasks = {...current.tasks};\n        delete tasks[id]\n        return {\n          ...current,\n          tasks,\n        };\n      });\n    },\n    [set],\n  );\n  return clearTaskOverride;\n}\n\nexport const useStartTimeOverride = () => {\n  const { overrides } = useContext(OverrideContext);\n  return overrides.startTime; \n};\n\nexport const useSetStartTimeOverride = () => {\n  const { set } = useContext(OverrideContext);\n  const setStartTime = useAsyncCallback(\n    async (startTime?: Time) => {\n      set(current => ({\n        ...current,\n        startTime,\n      }));\n    },\n    [set],\n  );\n  return setStartTime;\n};\n","import { Day } from \"../day\"\n\nexport enum TaskType {\n  appointment = 'appointment',\n  goal = 'goal',\n  routine = 'routine',\n}\n\nexport type Time = {\n  hour: number;\n  minute: number;\n}\n\nexport type UserLocation = {\n  id: string;\n  title: string;\n  position: {\n    longitute: number;\n    latitude: number;\n  };\n}\n\nexport type TaskBase = {\n  type: TaskType;\n  id: string;\n  title: string;\n  locations?: UserLocation[];\n  required: boolean;\n  priority?: number;\n  startTime: {\n    min: Time;\n    max: Time;\n  };\n  duration: number;\n}\n\nexport type Appointment = TaskBase & {\n  type: TaskType.appointment;\n  calendarId: string;\n}\n\nexport type Goal = TaskBase & {\n  type: TaskType.goal;\n  completed: boolean;\n  deadline?: Day;\n  startDate?: Day;\n  days: boolean[];\n}\n\nexport type Routine = TaskBase & {\n  type: TaskType.routine;\n  days: boolean[];\n}\n\nexport type Task = Appointment | Goal | Routine;\n","import { Time } from \"./types\";\n\nconst equal = (a: Time, b: Time) => {\n  return a.hour == b.hour && a.minute === b.minute;\n}\n\nconst stringToTime = (input: string) => {\n  const [hourPart, minutePart] = input.split(':').map(a => a.trim()).filter(Boolean);\n  const hour = parseInt(hourPart);\n  const minute = parseInt(minutePart || '0');\n\n  if (\n    !Number.isInteger(hour)\n    || !Number.isInteger(minute)\n    || Number.isNaN(hour)\n    || Number.isNaN(minute)\n  ) {\n    return undefined;\n  }\n\n  const result: Time = {\n    hour,\n    minute,\n  };\n\n  return result;\n};\n\nconst largerThan = (a: Time, b: Time) => {\n  return timeToMinutes(a) > timeToMinutes(b);\n}\n\nconst max = (a: Time, b: Time) => largerThan(a, b) ? a : b;\nconst min = (a: Time, b: Time) => largerThan(a, b) ? b : a;\n\nconst timeToString = (input: Time) => `${input.hour}:${input.minute}`;\n\nconst timeToMinutes = (time: Time) => time.hour * 60 + time.minute;\n\nconst minutesToTime = (minutes: number): Time => {\n  const hour = Math.floor(minutes / 60);\n  const minute = minutes % 60;\n  return { hour, minute };\n}\n\nconst timeToDate = (time: Time) => {\n  return new Date(0, 0, 0, time.hour, time.minute);\n}\n\nconst add = (a: Time, b: Time | number) => {\n  const toAdd = typeof b === 'number' ? b : b.hour * 60 + b.minute\n  const current = a.hour * 60 + a.minute + toAdd;\n  return minutesToTime(current);\n}\n\nconst timeUtils = {\n  timeToString,\n  stringToTime,\n  equal,\n  largerThan,\n  timeToMinutes,\n  timeToDate,\n  max,\n  add,\n};\n\nexport { timeUtils };\n","import { UserLocation } from \"#/types/location\";\nimport { Task } from \"#/types/task\";\n\nexport const locationEqual = (a: UserLocation, b: UserLocation) => {\n  if (a === b) {\n    return true;\n  }\n  // if (a.location === b.location) {\n  //   return true;\n  // }\n  // if (a.location && b.location && a.location.latitude === b.location.latitude && a.location.longitute === b.location.longitute) {\n  //   return true;\n  // }\n  if (a.title === b.title) {\n    return true;\n  }\n  return false;\n}\n\nexport const listContainLocation = (list: UserLocation[], target: UserLocation) => {\n  return !!list.find(l => locationEqual(l, target));\n}\n\nexport const getRemainingLocations = (tasks: Task[], current: UserLocation) => {\n  const result: UserLocation[] = [];\n  tasks.forEach((task) => {\n    if (!task.locations) {\n      return;\n    }\n    for (let location of task.locations) {\n      if (!listContainLocation(result, location) && !locationEqual(current, location)) {\n        result.push(location)\n      }\n    }\n  })\n  return result;\n};\n\n","import { Task, Time, timeUtils } from '#/features/data';\nimport { Transition } from '#/features/location';\nimport { Context, GraphNode } from '../types';\nimport { getRemainingLocations, listContainLocation } from './utils';\n\nconst DEFAULT_PRIORITY = 50;\n\nconst isDead = (impossible: Task[]) => {\n  const missingRequered = impossible.find(t => t.required);\n  return !!missingRequered;\n}\n\ntype GetImpossibleResult = {\n  remaining: Task[];\n  impossible: Task[];\n}\n\nexport const getImpossible = (\n  tasks: Task[],\n  time: Time,\n) => {\n  const result: GetImpossibleResult = {\n    remaining: [],\n    impossible: [],\n  }\n\n  for (let task of tasks) {\n    if (timeUtils.largerThan(time, task.startTime.max)) {\n      result.impossible.push(task);\n    } else {\n      result.remaining.push(task);\n    }\n  };\n\n  return result;\n}\n\ntype CalculateScoreOptions = {\n  tasks?: Task[];\n  transition?: Transition;\n  impossible: Task[];\n}\n\nconst calculateScore = ({\n  tasks,\n  transition,\n  impossible,\n}: CalculateScoreOptions) => {\n  let score = 0;\n\n  tasks?.forEach((task) => {\n    score += (task.priority || DEFAULT_PRIORITY) * 10;\n    impossible.forEach((task) => {\n      if (task.required) {\n        score -= 10000 + (1 * (task.priority || DEFAULT_PRIORITY));\n      } else {\n        score -= 100 + (1 * (task.priority || DEFAULT_PRIORITY));\n      }\n    });\n  });\n  if (transition) {\n    const minutes = transition.time;\n    score -= 10 + (1 * minutes);\n  }\n  return score;\n}\nconst getNext = async (\n  currentNode: GraphNode,\n  context: Context,\n): Promise<GraphNode[]> => {\n  const nextNodes: GraphNode[] = [];\n  if (!currentNode.transition) {\n    const remainingLocations = getRemainingLocations(currentNode.remainingTasks, currentNode.location);\n    await Promise.all(remainingLocations.map(async(location) => {\n      const transition = await context.getTransition(currentNode.location, location, currentNode.time.end);\n      const endTime = timeUtils.add(currentNode.time.end, transition.time);\n      const { remaining, impossible } = getImpossible(currentNode.remainingTasks, endTime);\n      const score = calculateScore({\n        transition, \n        impossible,\n      });\n      nextNodes.push({\n        parent: currentNode,\n        location: transition.to,\n        remainingTasks: remaining,\n        transition,\n        impossibeTasks: [\n          ...impossible,\n          ...currentNode.impossibeTasks,\n        ],\n        score: currentNode.score + score,\n        status: {\n          completed: false,\n          dead: false, // TODO: fix isDead(impossible),\n        },\n        time: {\n          start: currentNode.time.end,\n          end: endTime,\n        },\n      })\n    }));\n  }\n  const possibleTasks = currentNode.remainingTasks.filter(task => !task.locations || listContainLocation(task.locations, currentNode.location))\n  await Promise.all(possibleTasks.map(async (orgTask) => {\n    const task = {...orgTask};\n    let startTime = \n      timeUtils.max(\n        currentNode.time.end,\n        task.startTime.min,\n      );\n    const parentRemainging = currentNode.remainingTasks.filter(t => t !== orgTask);\n    let endTime = timeUtils.add(startTime, task.duration);\n    const { remaining, impossible } = getImpossible(parentRemainging, endTime);\n    const score = calculateScore({\n      tasks: [task], \n      impossible,\n    });\n    nextNodes.push({\n      parent: currentNode,\n      location: currentNode.location,\n      task,\n      remainingTasks: remaining,\n      impossibeTasks: [\n        ...impossible,\n        ...currentNode.impossibeTasks,\n      ],\n      score: currentNode.score + score,\n      status: {\n        completed: remaining.length === 0,\n        dead: isDead(impossible),\n      },\n      time: {\n        start: startTime,\n        end: endTime,\n      },\n    })\n  }));\n  return nextNodes;\n};\n\nexport { getNext };\n","import { Task, Time, UserLocation } from \"#/features/data\";\nimport { Context, GraphNode } from \"../types\";\nimport { getImpossible, getNext } from \"./get-next\";\n\nenum Strategies {\n  all = 'all',\n  allValid = 'all-valid',\n  firstValid = 'first-valid',\n  firstComplet = 'first-complete',\n}\ntype RunningStatus = {\n  current: 'running';\n  nodes: number;\n  start: Date;\n  strategy: Strategies,\n  cancel: () => void;\n}\n\ntype CompletedStatus = {\n  current: 'completed';\n  start: Date;\n  end: Date;\n  nodes: number;\n  strategy: Strategies,\n}\n\ntype Status = RunningStatus | CompletedStatus;\n\ntype BuildGraphOptions = {\n  location: UserLocation;\n  time: Time;\n  tasks: Task[];\n  context: Context;\n  strategy?: Strategies;\n  batchSize?: number;\n  sleepTime?: number;\n  callback?: (status: Status) => void;\n};\n\nconst sleep = (time: number) => new Promise(resolve => setTimeout(resolve, time));\n\nconst fil = <T>(\n  fn: ((item: T) => boolean)[],\n  input: T[],\n): T[][] => {\n  const output: T[][] = new Array(fn.length).fill(undefined).map(() => []);\n  for (let i = 0; i < input.length; i++) {\n    for (let b = 0; b < fn.length; b++) {\n      if (fn[b](input[i])) {\n        output[b].push(input[i]);\n        break;\n      }\n    }\n  }\n  return output;\n};\n\nconst buildGraph = async ({\n  location,\n  time,\n  tasks,\n  context,\n  strategy = Strategies.allValid,\n  callback,\n  batchSize = 1000,\n  sleepTime = 10,\n}: BuildGraphOptions) => {\n  const start = new Date();\n  let nodeCount = 0;\n  let running = true;\n  const { remaining, impossible } = getImpossible(tasks, time);\n  let leafList: GraphNode[] = [{\n    location,\n    time: {\n      end: time,\n      start: time,\n    },\n    score: 0,\n    remainingTasks: remaining,\n    impossibeTasks: impossible,\n    status: {\n      dead: false,\n      completed: false,\n    },\n  }];\n  const completedList: GraphNode[] = [];\n  const deadList: GraphNode[] = [];\n\n  const complete = (nodes: GraphNode[]) => {\n    if (callback) {\n      callback({\n        current: 'completed',\n        nodes: nodeCount,\n        start,\n        end: new Date(),\n        strategy,\n      });\n    }\n    return nodes.sort((a, b) => b.score - a.score);\n  }\n\n  while (true) {\n    nodeCount++;\n    if (!running) {\n      return [];\n    }\n    if (\n      leafList.length === 0\n      && completedList.length === 0\n      && strategy !== Strategies.all\n    ) {\n      strategy = Strategies.all;\n      leafList.push(...deadList);\n    }\n    const node = leafList.pop();\n    if (!node) {\n      break;\n    }\n    if (nodeCount % batchSize === 0) {\n      if (callback) {\n        callback({\n          current: 'running',\n          nodes: nodeCount,\n          strategy,\n          start,\n          cancel: () => {\n            running = false;\n          }\n        })\n      }\n      await sleep(sleepTime);\n    }\n    const next = await getNext(node, context); \n    const [alive, completed, dead] = fil([\n      n => (strategy === Strategies.all || !n.status.dead) && !n.status.completed,\n      n => !!n.status.completed && (strategy === Strategies.all || !n.status.dead),\n      n => n.status.dead,\n    ], next);\n    leafList.push(...alive);\n    if (strategy === Strategies.firstValid && completed.length > 0) {\n      return complete(completed);\n    }\n    if (completed.length > 0) {\n      completedList.push(...completed)\n    }\n    if (strategy === Strategies.firstComplet) {\n      const fullComplete = completed.find(c => c.impossibeTasks.length === 0);\n      if (fullComplete) {\n        return complete([fullComplete]);\n      }\n    }\n    if (strategy !== Strategies.all) {\n      deadList.push(...dead);\n    }\n  }\n\n  return complete(completedList);\n}\n\nexport type { Status, BuildGraphOptions };\nexport { buildGraph, Strategies };\n","import { createDataContext } from '#/utils/data-context';\nimport { Time } from '../data';\nimport { Strategies } from \"./algorithm/build-graph\";\n\ntype PlannerOptions = {\n  strategy: Strategies;\n  startTime: Time;\n}\n\nconst {\n  Context: PlannerContext,\n  Provider: PlannerProvider,\n} = createDataContext<PlannerOptions>({\n  createDefault: () => ({\n    startTime: { hour: 7, minute: 0 },\n    strategy: Strategies.firstComplet,\n  }),\n});\n\nexport type { PlannerOptions };\nexport { PlannerContext, PlannerProvider };\n","import { createDataContext } from \"#/utils/data-context\";\nimport { Routine } from \"../data\";\n\nconst {\n  Context: RoutinesContext,\n  Provider: RoutinesProvider,\n}= createDataContext<{[id: string]: Routine}>({\n  createDefault: () => ({}),\n})\n\nexport { RoutinesContext, RoutinesProvider };\n","import { useCallback, useContext, useMemo } from \"react\"\nimport { Routine } from \"../data\";\nimport { RoutinesContext } from \"./context\"\n\nexport const useRoutines = () => {\n  const { data } = useContext(RoutinesContext);\n  const current = useMemo(\n    () => Object.values(data),\n    [data],\n  )\n  return current;\n};\n\nexport const useSetRoutine = () => {\n  const { setData } = useContext(RoutinesContext);\n  const set = useCallback(\n    (routine: Routine) => setData(current => ({\n      ...current,\n      [routine.id]: routine, \n    })),\n    [setData],\n  );\n\n  return set;\n}\n\nexport const useRemoveRoutine = () => {\n  const { setData } = useContext(RoutinesContext);\n  const removeRoutine = useCallback(\n    (id: string) => {\n      setData(current => {\n        const next = {...current};\n        delete next[id];\n        return next;\n      })\n    },\n    [setData],\n  );\n\n  return removeRoutine;\n}\n","import { useCallback, useContext, useMemo } from \"react\"\nimport { Goal } from \"../data\";\nimport { GoalsContext } from \"./context\"\n\nexport const useGoals = () => {\n  const { data } = useContext(GoalsContext);\n  const current = useMemo(\n    () => Object.values(data),\n    [data],\n  )\n  return current;\n};\n\nexport const useSetGoals = () => {\n  const { setData } = useContext(GoalsContext);\n  const set = useCallback(\n    (goal: Goal) => setData(current => ({\n      ...current,\n      [goal.id]: goal, \n    })),\n    [setData],\n  );\n\n  return set;\n}\n\nexport const useRemoveGoal = () => {\n  const { setData } = useContext(GoalsContext);\n  const removeRoutine = useCallback(\n    (id: string) => {\n      setData(current => {\n        const next = {...current};\n        delete next[id];\n        return next;\n      })\n    },\n    [setData],\n  );\n\n  return removeRoutine;\n}\n","import { timeUtils } from \"#/features/data\";\nimport { GraphNode, PlannedEntry } from \"../types\";\n\nconst constructDay = (node: GraphNode) => {\n  let current: GraphNode | undefined = node;\n  const plans: PlannedEntry[] = [];\n\n  while(current) {\n    if (current.task) {\n      plans.push({\n        type: 'task',\n        name: current.task?.title || 'start',\n        start: timeUtils.add(current.time.start, (current.transition?.time || 0)),\n        end: current.time.end,\n        score: current.score,\n      })\n    }\n    if (current.transition) {\n      plans.push({\n        type: 'transition',\n        start: current.time.start,\n        end: timeUtils.add(current.time.start, current.transition.time),\n        from: current.transition.from,\n        to: current.transition.to,\n      })\n    }\n    current = current.parent;\n  }\n\n  return plans.reverse();\n}\n\nexport { constructDay };\n","import { buildGraph, Status, Strategies } from \"./algorithm/build-graph\";\nimport { useContext } from \"react\";\nimport { add } from 'date-fns';\nimport { PlannerContext } from \"./context\";\nimport { Task, Time, UserLocation } from \"../data\";\nimport { useRoutines } from \"../routines\";\nimport { useGoals } from \"../goals/hooks\";\nimport { useAsyncCallback } from \"../async\";\nimport { Day, dayUtils } from \"../day\";\nimport { useGetOverride } from \"../overrides\";\nimport { useGetAppointments } from \"../appointments\";\nimport { useGetTransition } from \"../location\";\nimport { PlannedEntry } from \"./types\";\nimport { constructDay } from \"./algorithm/construct-day\";\n\nexport type PreparePlanOptions = {\n  start: Day;\n  end: Day;\n}\n\nexport type PlanOptions = PreparePlanOptions & {\n  location: UserLocation;\n}\n\nexport type PlanResultDay = {\n  day: Day;\n  start: Time;\n} & ({\n  status: 'waiting',\n} | {\n  status: 'running',\n  nodes: number;\n  strategy: Strategies;\n} | {\n  status: 'done';\n  nodes: number;\n  strategy: Strategies;\n  plan: PlannedEntry[];\n  impossible: Task[];\n});\n\nexport type PlanResult = {\n  impossible: Task[];\n  days: {\n    [day: string]: PlanResultDay;\n  }\n}\n\nconst getDays = (start: Day, end: Day): Day[] => {\n  const result: Day[] = [];\n  let currentDate = dayUtils.dayToDate(start);\n  const stopDate = dayUtils.dayToDate(end);\n  while (currentDate <= stopDate) {\n    result.push(dayUtils.dateToDay(currentDate));\n    currentDate = add(currentDate, {\n      days: 1,\n    });\n  }\n  return result;\n}\n\nconst firstValue = <T>(...args: (T | undefined)[]): T => {\n  for (let arg of args) {\n    if (typeof arg !== 'undefined') {\n      return arg;\n    }\n  }\n  return undefined as unknown as T;\n}\n\nexport const useOptions = () => {\n  const { data } = useContext(PlannerContext);\n  return data;\n}\n\nexport const useSetOptions = () => {\n  const { setData } = useContext(PlannerContext);\n  return setData;\n}\n\nconst usePreparePlan = () => {\n  const routines = useRoutines();\n  const goals = useGoals();\n  const getOverrides = useGetOverride();\n  const [getAppontments] = useGetAppointments();\n\n  const preparePlan = useAsyncCallback(\n    async ({ start, end }: PreparePlanOptions) => {\n      const days = await Promise.all(getDays(start, end).map(async (day) => {\n        const overrides = await getOverrides(day);\n        const start: Time = firstValue(overrides.startTime, { hour: 7, minute: 0 });\n        const appointments = await getAppontments(day);\n        const tasks = [...routines, ...appointments].map<Task | undefined>((task) => {\n          const override = overrides.tasks[task.id];\n          if (override?.enabled === false) {\n            return undefined;\n          }\n          const result: Task = {\n            ...task,\n            startTime: {\n              min: firstValue(override?.startMin, task.startTime.min),\n              max: firstValue(override?.startMax, task.startTime.max),\n            },\n            duration: firstValue(override?.duration, task.duration),\n            required: firstValue(override?.required, task.required),\n          }\n          return result;\n        }).filter(Boolean).map(a => a as Exclude<typeof a, undefined>);\n\n        return {\n          day,\n          start,\n          tasks,\n        }\n\n      }));\n      return {\n        goals: [...goals],\n        days,\n      }\n    },\n    [routines, goals, getOverrides, getAppontments],\n  );\n\n  return preparePlan;\n}\n\nexport const usePlanOptions = () => {\n  const { data } = useContext(PlannerContext);\n  return data;\n}\n\nexport const useSetPlanOptions = () => {\n  const { setData } = useContext(PlannerContext);\n  return setData;\n}\n\nexport const usePlan = () => {\n  const [preparePlan] = usePreparePlan();\n  const getTransition = useGetTransition();\n  const options = usePlanOptions();\n  const createPlan = useAsyncCallback(\n    async ({ location, ...prepareOptions}: PlanOptions) => {\n      const prepared = await preparePlan(prepareOptions);\n      let result: PlanResult = {\n        impossible: [],\n        days: prepared.days.reduce((output, current) => ({\n          ...output,\n          [dayUtils.toId(current.day)]: {\n            day: current.day,\n            start: current.start,\n            status: 'waiting',\n          },\n        }), {} as {[name: string]: PlanResultDay})\n      }\n      const update = (next: PlanResult) => {\n        result = next;\n      }\n      for (let day of prepared.days) {\n        const id = dayUtils.toId(day.day);\n        const dayGoal = prepared.goals;\n        const graph = await buildGraph({\n          location,\n          time: day.start,\n          tasks: [...day.tasks, ...dayGoal],\n          strategy: options.strategy,\n          context: {\n            getTransition,\n          },\n          callback: (status) => {\n            update({\n              ...result,\n              days: {\n                ...result.days,\n                [id]: {\n                  day: day.day,\n                  start: day.start,\n                  status: 'running',\n                  nodes: status.nodes,\n                  strategy: status.strategy,\n                }\n              }\n            });\n          }\n        });\n        const [winner] = graph;\n        if (!winner) {\n          continue;\n        }\n        const plan = constructDay(winner);\n        update({\n          ...result,\n          days: {\n            ...result.days,\n            [id]: {\n              ...result.days[id],\n              impossible: winner.impossibeTasks,\n              status: 'done',\n              plan,\n            }\n          }\n        })\n        prepared.goals = prepared.goals.filter((goal) => {\n          if (!dayGoal.find(d => d.id === goal.id)) {\n            return true;\n          }\n          if (!winner.impossibeTasks.find(d => d.id === goal.id)) {\n            return false;\n          }\n          return true;\n        })\n      }\n\n      return {\n        ...result,\n        impossible: prepared.goals,\n      };\n    },\n    [preparePlan, getTransition, options],\n  );\n  return createPlan;\n}\n","import { useAsync, useAsyncCallback } from \"#/features/async\";\nimport { useContext } from \"react\"\nimport { Day, useDate } from \"../day\";\nimport { AppointmentsContext, AppointmentsStatus } from \"./context\"\n\nexport const useAppointmentStatus = () => {\n  const { status } = useContext(AppointmentsContext);\n  return status;\n};\n\nexport const useAppointments = () => {\n  const date = useDate();\n  const context = useContext(AppointmentsContext);\n  const result = useAsync(\n    async () => {\n      if (context.status !== AppointmentsStatus.approved) {\n        return [];\n      }\n      const appointments = await context.getDay(date);\n      return appointments;\n    },\n    [\n      context.status === AppointmentsStatus.approved && context.getDay,\n      date,\n    ],\n  );\n  return result;\n}\n\nexport const useGetAppointments = () => {\n  const context = useContext(AppointmentsContext);\n  const result = useAsyncCallback(\n    async (date: Day) => {\n      if (context.status !== AppointmentsStatus.approved) {\n        return [];\n      }\n      const appointments = await context.getDay(date);\n      return appointments;\n    },\n    [\n      context.status === AppointmentsStatus.approved && context.getDay,\n    ],\n  );\n  return result;\n}\n","import { ReactNode } from \"react\"\nimport { AppointmentsProvider } from \"./appointments\"\nimport { DateProvider } from \"./day\"\nimport { GoalsProvider } from \"./goals/context\"\nimport { GetTransition, LocationProvider } from \"./location\"\nimport { OverrideProvider } from \"./overrides\"\nimport { PlannerProvider } from \"./planner\"\nimport { RoutinesProvider } from \"./routines\"\n\ntype SetupProps = {\n  children: ReactNode;\n  getTransit: GetTransition;\n}\n\nconst Setup: React.FC<SetupProps> = ({\n  children,\n  getTransit,\n}) => {\n  return (\n    <DateProvider>\n      <PlannerProvider storageKey=\"planner\">\n        <LocationProvider getTransition={getTransit} lookup={() => []}>\n          <AppointmentsProvider>\n            <GoalsProvider storageKey=\"goals\">\n              <RoutinesProvider storageKey=\"routines\">\n                <OverrideProvider>\n                  {children}\n                </OverrideProvider>\n              </RoutinesProvider>\n            </GoalsProvider>\n          </AppointmentsProvider>\n        </LocationProvider>\n      </PlannerProvider>\n    </DateProvider>\n  );\n};\n\nexport type { SetupProps };\nexport { Setup };\n","import { useMemo } from \"react\";\nimport { useAppointments } from \"../appointments\";\nimport { useAsyncCallback } from \"../async\";\nimport { Task, TaskType } from \"../data\";\nimport { useGoals, useRemoveGoal, useSetGoals } from \"../goals/hooks\";\nimport { useRemoveRoutine, useRoutines, useSetRoutine } from \"../routines\";\n\nexport const useTasks = (type?: TaskType) => {\n  const [appointments] = useAppointments();\n  const routines = useRoutines();\n  const goals = useGoals();\n\n  const tasks = useMemo<Task[]>(\n    () => {\n      if (!type) {\n        return [...(appointments || []), ...routines, ...goals];\n      }\n      const map = {\n        [TaskType.routine]: routines,\n        [TaskType.appointment]: appointments,\n        [TaskType.goal]: goals,\n      }\n      return map[type] || [];\n    },\n    [appointments, routines, goals, type],\n  );\n\n  return tasks;\n};\n\nexport const useSetTask = () => {\n  const setRoutine = useSetRoutine();\n  const setGoal = useSetGoals();\n\n  const result = useAsyncCallback(\n    async (task: Task) => {\n      if (task.type === TaskType.routine) {\n        await setRoutine(task);\n      } else if (task.type === TaskType.goal) {\n        await setGoal(task);\n      }\n    },\n    [setRoutine, setGoal],\n  );\n  return result;\n};\n\nexport const useRemoveTask = () => {\n  const removeRoutine = useRemoveRoutine();\n  const removeGoal = useRemoveGoal();\n\n  const result = useAsyncCallback(\n    async (task: Task) => {\n      if (task.type === TaskType.routine) {\n        removeRoutine(task.id);\n      } else if (task.type === TaskType.goal) {\n        removeGoal(task.id);\n      }\n    },\n    [removeRoutine, removeGoal],\n  );\n  return result;\n};\n","import { TaskType } from \"#/features/data\";\nimport { useTasks } from \"#/features/tasks\";\nimport { Group } from \"@morten-olsen/ui\"\nimport { RootNavigationProp } from \"#/ui/router\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useCallback } from \"react\";\n\ntype Props = {\n  type: TaskType;\n}\n\nconst TaskGroup: React.FC<Props> = ({ type }) => {\n  const { navigate } = useNavigation<RootNavigationProp>();\n  const tasks = useTasks(type);\n\n  const add = useCallback(\n    (type: TaskType) => {\n      navigate('add-task', {\n        type,\n      })\n    },\n    [navigate],\n  );\n\n  return (\n    <Group\n      title={type}\n      add={() => add(type)}\n      items={tasks || []}\n      getKey={(task) => task.id}\n      render={(task) => ({\n        title: task.title,\n        onPress: () => {\n          navigate('set-override', { id: task.id });\n        },\n      })}\n    />\n  );\n};\n\nexport { TaskGroup };\n","import { useAppointmentStatus } from \"#/features/appointments\";\nimport { AppointmentsStatus } from \"#/features/appointments/context\";\nimport { TaskType } from \"#/features/data\";\nimport { dayUtils, useDate, useSetDate } from \"#/features/day\";\nimport { useSetStartTimeOverride, useStartTimeOverride } from \"#/features/overrides\";\nimport { CalendarStrip } from \"@morten-olsen/ui/components/date\"\nimport { TimeInput } from \"@morten-olsen/ui/components/form\";\nimport { TaskGroup } from \"#/ui/containers/tasks/group\";\nimport styled from \"styled-components/native\";\n\nconst Wrapper = styled.View`\n  margin-top: 30px;\n  flex: 1;\n`;\n\nconst Content = styled.ScrollView`\n  flex: 1;\n`;\n\nconst DayScreen: React.FC = () => {\n  const date = useDate();\n  const setDate = useSetDate();\n  const appointmentStatus = useAppointmentStatus();\n  const startTimeOverride = useStartTimeOverride();\n  const [setStartTimeOverride] = useSetStartTimeOverride();\n\n  return (\n    <Wrapper>\n      <CalendarStrip\n        selected={dayUtils.dayToDate(date)}\n        onSelect={(date) => setDate(dayUtils.dateToDay(date))}\n      />\n      <Content>\n        <TimeInput\n          key={dayUtils.toId(date)}\n          label=\"Start time\"\n          value={startTimeOverride}\n          onChange={setStartTimeOverride}\n        />\n        {appointmentStatus === AppointmentsStatus.rejected && (\n          <TaskGroup type={TaskType.appointment} />\n        )}\n        <TaskGroup type={TaskType.routine} />\n        <TaskGroup type={TaskType.goal} />\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport { DayScreen };\n","import { useAsyncCallback } from \"#/features/async\";\nimport { nanoid } from 'nanoid';\nimport { Task, TaskType, Time, UserLocation } from \"#/features/data\";\nimport { useLocations } from \"#/features/location\";\nimport { useSetTask, useTasks } from \"#/features/tasks\";\nimport { Button, Cell, Group, Popup, Row } from \"@morten-olsen/ui/components/base\"\nimport { Checkbox, TextInput, TimeInput, OptionalSelector } from \"@morten-olsen/ui/components/form\";\nimport { RootNavigationProp, TaskAddScreenRouteProp } from \"#/ui/router\";\nimport { Overline } from \"@morten-olsen/ui/typography\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components/native\";\n\nconst SideBySide = styled.View`\n  flex-direction: row;\n`;\n\nconst dayNames = [\n  'Monday',\n  'Tuesday',\n  'Wednsday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n  'Sunday',\n]\n\nconst days = new Array(7).fill(undefined).map((_, i) => ({\n  id: i,\n  name: dayNames[i],\n}))\n\nconst TaskAddScreen: React.FC = () => {\n  const { params: { type, id }} = useRoute<TaskAddScreenRouteProp>();\n  const { navigate, goBack } = useNavigation<RootNavigationProp>();\n  const [currentId, setCurrentId] = useState(id || nanoid());\n  const [setTask] = useSetTask();\n  const tasks = useTasks();\n  const [currentType, setCurrentType] = useState<TaskType>(type);\n\n  const locations = useLocations();\n  const [title, setTitle] = useState('');\n  const [maxStart, setMaxStart] = useState<Time>();\n  const [minStart, setMinStart] = useState<Time>();\n  const [duration, setDuration] = useState('');\n  const [hasLocation, setHasLocation] = useState(false);\n  const [selectedLocations, setSelectedLocations] = useState<UserLocation[]>([]);\n  const [hasDays, setHasDays] = useState(false);\n  const [selectedDays, setSelectedDays] = useState<typeof days>([]);\n  const [required, setRequired] = useState(false);\n\n  useEffect(\n    () => {\n      if (!id) {\n        return;\n      }\n      const current = tasks.find(t => t.id === id);\n      if (!current) {\n        return;\n      }\n      setTitle(current.title);\n      setMaxStart(current.startTime.max);\n      setMinStart(current.startTime.min);\n      setDuration(current.duration?.toString() || '');\n      setHasLocation(!!current.locations);\n      setSelectedLocations(current.locations || []);\n      setCurrentType(current.type || TaskType.goal);\n      setRequired(current.required);\n      if (current.type === TaskType.goal || current.type === TaskType.routine) {\n        setHasDays(!!current.days);\n      }\n    },\n    [id],\n  )\n\n  const [save] = useAsyncCallback(\n    async () => {\n      const task: Partial<Task> = {\n        id: currentId,\n        title,\n        type: currentType,\n        required,\n        startTime: {\n          max: maxStart!,\n          min: minStart!,\n        },\n        duration: parseInt(duration),\n        locations: hasLocation ? selectedLocations: undefined,\n      };\n      if (task.type === TaskType.goal || task.type === TaskType.routine) {\n        task.days = hasDays\n          ? new Array(7).fill(undefined).map((_, i) => !!selectedDays.find(d => d.id === i))\n          : undefined;\n      }\n      await setTask(task as Task);\n      navigate('main');\n    },\n    [\n      title,\n      currentId,\n      maxStart,\n      minStart,\n      duration,\n      hasLocation,\n      selectedLocations,\n      hasDays,\n      selectedDays,\n      required,\n    ],\n  );\n\n  return (\n    <Popup title={type ? `Add ${type}` : `Update ${title}`} onClose={goBack}>\n      <Group title=\"Basic\">\n        <TextInput label=\"Title\" value={title} onChangeText={setTitle} />\n        <SideBySide>\n          <TimeInput flex={1} label=\"Min start\" value={minStart} onChange={setMinStart} />\n          <TimeInput flex={1} label=\"Max start\" value={maxStart} onChange={setMaxStart} />\n        </SideBySide>\n        <TextInput\n          label=\"Duration\"\n          value={duration}\n          onChangeText={setDuration}\n          right={<Cell><Overline>min</Overline></Cell>}\n        />\n      </Group>\n      <Group title=\"Optional\" startHidden>\n        <OptionalSelector\n          label=\"Location\"\n          enabled={hasLocation}\n          items={locations}\n          selected={selectedLocations}\n          onChange={setSelectedLocations}\n          render={location => ({\n            title: location.title,\n          })}\n          getKey={location => location.id}\n          setEnabled={setHasLocation}\n          disabledText=\"Anywhere\"\n          enabledText=\"Specific location\"\n        />\n        <OptionalSelector\n          label=\"Days\"\n          enabled={hasDays}\n          items={days}\n          selected={selectedDays}\n          onChange={setSelectedDays}\n          render={day=> ({\n            title: day.name\n          })}\n          getKey={day => day.id.toString()}\n          setEnabled={setHasDays}\n          disabledText=\"Any day\"\n          enabledText=\"Specific days\"\n        />\n          <Checkbox label=\"Required\" onChange={setRequired} value={required} />\n        {type === TaskType.goal && (\n          <SideBySide>\n            <TextInput label=\"Start\" flex={1} />\n            <TextInput label=\"Deadline\" flex={1} />\n          </SideBySide>\n        )}\n      </Group>\n      <Row>\n        <Button onPress={save} title=\"Save\" type=\"primary\" />\n      </Row>\n    </Popup>\n  );\n};\n\nexport { TaskAddScreen };\n","import { TaskType } from \"#/features/data\";\nimport { Page, Row } from \"@morten-olsen/ui/components/base\";\nimport { MoreScreenNavigationProps } from \"#/ui/router\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst MoreScreen: React.FC = () => {\n  const { navigate } = useNavigation<MoreScreenNavigationProps>();\n\n  return (\n    <Page>\n      <Row\n        title=\"Calendars\"\n      />\n      <Row\n        title=\"Locations\"\n        onPress={() => navigate('locations')}\n      />\n      <Row\n        title=\"Routines\"\n        onPress={() => navigate('tasks', { type: TaskType.routine })}\n      />\n      <Row\n        title=\"Goals\"\n        onPress={() => navigate('tasks', { type: TaskType.goal })}\n      />\n    </Page>\n  );\n}\n\nexport { MoreScreen };\n","import { useLocations, useRemoveLocation } from \"#/features/location\"\nimport { List, Page } from \"@morten-olsen/ui/components/base\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst LocationListScreen: React.FC = () => {\n  const { navigate } = useNavigation();\n  const locations = useLocations();\n  const removeLocation = useRemoveLocation();\n\n  return (\n    <Page>\n      <List\n        items={locations}\n        remove={l => removeLocation(l.id)}\n        getKey={l => l.id}\n        add={() => navigate('set-location', {})}\n        render={(item) => ({\n          title: item.title,\n        })}\n      />\n    </Page>\n  );\n}\n\nexport { LocationListScreen };\n","import { nanoid } from 'nanoid';\nimport { useAsyncCallback } from \"#/features/async\";\nimport { useLocations, useSetLocation } from \"#/features/location\"\nimport { Button, Popup, Row } from \"@morten-olsen/ui/components/base\";\nimport { TextInput } from \"@morten-olsen/ui/components/form\";\nimport { LocationSetScreenRouteProp, RootNavigationProp } from \"#/ui/router\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport { useEffect, useState } from \"react\";\n\nconst LocationSetScreen: React.FC = () => {\n  const {\n    params: { id = nanoid() },\n  } = useRoute<LocationSetScreenRouteProp>();\n  const { navigate } = useNavigation<RootNavigationProp>();\n  const locations = useLocations();\n  const [title, setTitle] = useState('');\n  const setLocation = useSetLocation();\n\n  useEffect(\n    () => {\n      const current = locations.find(l => l.id === id);\n      if (!current) {\n        return;\n      }\n      setTitle(current.title);\n    },\n    [id, locations],\n  )\n\n  const [save] = useAsyncCallback(\n    async () => {\n      await setLocation({\n        id,\n        title,\n        position: { longitute: 0, latitude: 0 },\n      });\n      navigate('main');\n    },\n    [id, title],\n  );\n\n  return (\n    <Popup title=\"Edit location\">\n      <TextInput\n        label=\"What should it call the location?\"\n        value={title}\n        onChangeText={setTitle}\n      />\n      <Row>\n        <Button title=\"Save\" onPress={save} />\n      </Row>\n    </Popup>\n  );\n};\n\nexport { LocationSetScreen };\n","import { useRemoveTask, useTasks } from \"#/features/tasks\";\nimport { List, Page } from \"@morten-olsen/ui/components/base\";\nimport { RootNavigationProp, TaskListScreenRouteProp } from \"#/ui/router\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\n\nconst TaskListScreen: React.FC = () => {\n  const { \n    params: { type },\n  } = useRoute<TaskListScreenRouteProp>();\n  const { navigate } = useNavigation<RootNavigationProp>();\n  const tasks = useTasks(type);\n  const [removeTask] = useRemoveTask();\n\n  return (\n    <Page>\n      <List\n        items={tasks}\n        remove={removeTask}\n        getKey={l => l.id}\n        add={() => navigate('add-task', { type })}\n        render={(item) => ({\n          title: item.title,\n          onPress: () => {\n            navigate('add-task', { id: item.id })\n          },\n        })}\n      />\n    </Page>\n  );\n}\n\nexport { TaskListScreen };\n","import { useAsyncCallback } from \"#/features/async\";\nimport { Time, timeUtils, UserLocation } from \"#/features/data\";\nimport { useLocations } from \"#/features/location\";\nimport { useTasks } from \"#/features/tasks\";\nimport { Button, Cell, Popup, Row } from \"@morten-olsen/ui/components/base\"\nimport { Checkbox, TextInput, TimeInput, OptionalSelector } from \"@morten-olsen/ui/components/form\";\nimport { RootNavigationProp, TaskAddScreenRouteProp } from \"#/ui/router\";\nimport { Overline } from \"@morten-olsen/ui/typography\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components/native\";\nimport { Override, useClearTaskOverride, useOverrides, useSetTaskOverride } from \"#/features/overrides\";\n\nconst SideBySide = styled.View`\n  flex-direction: row;\n  justify-content: flex-end;\n`;\n\nconst dayNames = [\n  'Monday',\n  'Tuesday',\n  'Wednsday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n  'Sunday',\n]\n\nconst days = new Array(7).fill(undefined).map((_, i) => ({\n  id: i,\n  name: dayNames[i],\n}))\n\nconst OverrideSetScreen: React.FC = () => {\n  const { params: { id }} = useRoute<TaskAddScreenRouteProp>();\n  const { navigate, goBack } = useNavigation<RootNavigationProp>();\n  const [setOverride] = useSetTaskOverride()\n  const [clearOverrides] = useClearTaskOverride();\n  const overrides = useOverrides();\n  const tasks = useTasks();\n  const task = useMemo(\n    () => tasks.find(t => t.id === id)!,\n    [tasks, id],\n  );\n\n  const locations = useLocations();\n  const [maxStart, setMaxStart] = useState<Time>();\n  const [minStart, setMinStart] = useState<Time>();\n  const [duration, setDuration] = useState('');\n  const [hasLocation, setHasLocation] = useState(false);\n  const [selectedLocations, setSelectedLocations] = useState<UserLocation[]>([]);\n  const [hasDays, setHasDays] = useState(false);\n  const [selectedDays, setSelectedDays] = useState<typeof days>([]);\n\n  useEffect(\n    () => {\n      if (!id) {\n        return;\n      }\n      const current = overrides.tasks[id];\n      if (!current) {\n        return;\n      }\n      setMinStart(current.startMin);\n      setMaxStart(current.startMax);\n      setDuration(current.duration?.toString() || '');\n      setHasLocation(!!current.locations);\n      setSelectedLocations(current.locations || []);\n    },\n    [id],\n  )\n\n  const [save] = useAsyncCallback(\n    async () => {\n      const override: Override = {\n        startMin: minStart,\n        startMax: maxStart,\n        duration: duration ? parseInt(duration) : undefined,\n        locations: hasLocation ? selectedLocations: undefined,\n      };\n      await setOverride(id, override);\n      navigate('main');\n    },\n    [\n      id,\n      maxStart,\n      minStart,\n      duration,\n      hasLocation,\n      selectedLocations,\n      hasDays,\n      selectedDays,\n    ],\n  );\n\n  const [clear] = useAsyncCallback(\n    async () => {\n      await clearOverrides(id);\n      navigate('main');\n    },\n    [id, clearOverrides],\n  );\n\n  return (\n    <Popup title={`Overrides for ${task.title}`} onClose={goBack}>\n      <SideBySide>\n        <TimeInput\n          flex={1}\n          placeholder={task.startTime.min ? timeUtils.timeToString(task.startTime.min) : undefined}\n          label=\"Min start\"\n          value={minStart}\n          onChange={setMinStart}\n        />\n        <TimeInput\n          flex={1}\n          placeholder={task.startTime.max ? timeUtils.timeToString(task.startTime.max) : undefined}\n          label=\"Max start\"\n          value={maxStart}\n          onChange={setMaxStart}\n        />\n      </SideBySide>\n      <TextInput\n        label=\"Duration\"\n        value={duration}\n        onChangeText={setDuration}\n        right={<Cell><Overline>min</Overline></Cell>}\n      />\n      <OptionalSelector\n        label=\"Location\"\n        enabled={hasLocation}\n        items={locations}\n        selected={selectedLocations}\n        onChange={setSelectedLocations}\n        render={location => ({\n          title: location.title,\n        })}\n        getKey={location => location.id}\n        setEnabled={setHasLocation}\n        disabledText=\"Anywhere\"\n        enabledText=\"Specific location\"\n      />\n      <OptionalSelector\n        label=\"Days\"\n        enabled={hasDays}\n        items={days}\n        selected={selectedDays}\n        onChange={setSelectedDays}\n        render={day=> ({\n          title: day.name\n        })}\n        getKey={day => day.id.toString()}\n        setEnabled={setHasDays}\n        disabledText=\"Any day\"\n        enabledText=\"Specific days\"\n      />\n      <Checkbox label=\"Required\" />\n      <TextInput\n        label=\"Priority\"\n        placeholder=\"5\"\n      />\n      <Row>\n        <SideBySide>\n          <Button onPress={clear} title=\"Clear\" type=\"destructive\" />\n          <Button onPress={save} title=\"Save\" type=\"primary\" />\n        </SideBySide>\n      </Row>\n    </Popup>\n  );\n};\n\nexport { OverrideSetScreen };\n","import { useMemo } from 'react';\nimport { PlannedTask } from \"#/features/planner/types\";\nimport chroma from 'chroma-js';\nimport styled from \"styled-components/native\";\nimport stringToColor from 'string-to-color';\nimport { timeUtils } from '#/features/data';\nimport { Body1, CalendarEntry, Row } from '@morten-olsen/ui';\n\ntype Props = {\n  task: PlannedTask;\n  onPress?: () => void;\n};\n\nconst Time = styled.Text<{background : string}>`\n  font-size: 10px;\n  font-weight: bold;\n`;\n\nconst TimeBox = styled.View<{\n  background: string;\n}>`\n  margin-right: 10px;\n  width: 50px;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Filler = styled.View`\n  margin: 10px;\n  width: 50px;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Block = styled.View<{\n  background: string;\n  height: number;\n}>`\n  background: ${({ background }) => background};\n  height: ${({ height }) => height / 3}px;\n  max-height: 100px;\n  margin: 5px;\n  flex-direction: row;\n  align-items: center;\n  border-radius: 15px;\n  overflow: hidden;\n  border: solid 1px ${({ background }) => background === 'transparent' ? background : chroma(background).darken(0.3).hex()};\n`;\n\nconst Main = styled.View`\n  flex: 1;\n`\n\nconst Touch = styled.TouchableOpacity`\n`;\n\nconst PlanDayTask: React.FC<Props> = ({ task, onPress }) => {\n  const color = useMemo(\n    () => chroma(stringToColor(task.name)).luminance(0.7).saturate(1).brighten(0.6).hex(),\n    [task.name],\n  );\n  const height = useMemo(\n    () => (timeUtils.timeToMinutes(task.end) - timeUtils.timeToMinutes(task.start)) / 10,\n    [task.start, task.end],\n  );\n  const view = (\n    <Row>\n      <CalendarEntry\n        location={task.location?.join(', ') || 'anywhere'}\n        start={timeUtils.timeToDate(task.start)}\n        end={timeUtils.timeToDate(task.end)}\n        title={task.name}\n      />\n    </Row>\n  );\n\n  if (onPress) {\n    return (\n      <Touch onPress={onPress}>\n        {view}\n      </Touch>\n    );\n  }\n  return view;\n};\n\nexport { PlanDayTask };\n","import { dayUtils } from \"#/features/day\";\nimport { PlanResultDay } from \"#/features/planner\"\nimport { Body1, Jumbo } from \"@morten-olsen/ui\";\nimport { PlanDayTask } from \"./task\";\n\ntype Props = {\n  day: PlanResultDay;\n};\n\nconst PlanDay: React.FC<Props> = ({ day }) => {\n  if (day.status === 'waiting') {\n    return <></>\n  }\n  if (day.status === 'running') {\n    return <Body1>Running</Body1>\n  }\n  return (\n    <>\n      {day.plan.map((item) => {\n        if (item.type === 'task') {\n          return <PlanDayTask task={item} />\n        }\n        return <Body1>Transit {item.from.title} to {item.to.title}</Body1>\n      })}\n    </>\n  )\n}\n\nexport { PlanDay };\n","import { Day, dayUtils, useDate } from \"#/features/day\"\nimport { usePlan } from \"#/features/planner\";\nimport { Button, Row } from \"@morten-olsen/ui/components/base\";\nimport { CalendarStrip, DateSelector, FormLayout } from \"@morten-olsen/ui\";\nimport { PlanDay } from \"#/ui/containers/plan\";\nimport { useCallback, useState } from \"react\";\nimport styled from \"styled-components/native\";\n\nconst Scroll = styled.ScrollView`\n flex: 1;\n`\nconst Wrapper = styled.View`\n  margin: 60px 0;\n`\n\nconst Horizontal = styled.View`\n`;\n\nconst FlexDateSelector = styled(DateSelector)`\n  width: 100%;\n`;\n\nconst PlanScreen: React.FC = () => {\n  const [start, setStart] = useState<Day>(dayUtils.today());\n  const [end, setEnd] = useState<Day>(dayUtils.today());\n  const [plan, { result }] = usePlan();\n\n  const runPlanning = useCallback(\n    () => plan({\n      start,\n      end,\n      location: { id: 'sdf', title: 'sdf' },\n    }),\n    [start, end, plan],\n  );\n\n  return (\n    <Scroll>\n      <Wrapper>\n        <Horizontal>\n          <FlexDateSelector\n            label=\"Start date\"\n            selected={start}\n            onSelect={setStart}\n          />\n          <DateSelector\n            label=\"End date\"\n            selected={end}\n            onSelect={setEnd}\n          />\n        </Horizontal>\n        <Row>\n          <Button onPress={runPlanning} title=\"Plan\" />\n        </Row>\n        {!!result && (\n          <>\n            <CalendarStrip\n            />\n            {Object.entries(result.days).map(([key, day]) => (\n                <PlanDay day={day} />\n            ))}\n          </>\n        )}\n      </Wrapper>\n    </Scroll>\n  );\n}\n\nexport { PlanScreen }\n","import { useMemo } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useTheme } from 'styled-components/native';\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Icon } from '@morten-olsen/ui/components/base';\nimport { DayScreen } from '../screens/day';\nimport { TaskAddScreen } from '../screens/task/add';\nimport { MainTabParamList, RootStackParamList } from './types';\nimport { Platform } from 'react-native';\nimport { MoreScreen } from '../screens/more';\nimport { LocationListScreen } from '../screens/locations/list';\nimport { LocationSetScreen } from '../screens/locations/set';\nimport { TaskListScreen } from '../screens/task/list';\nimport { OverrideSetScreen } from '../screens/task/overrides';\nimport { PlanScreen } from '../screens/plan';\n\nconst MoreStackNavigator = createNativeStackNavigator();\n\nconst MoreStack: React.FC = () => (\n  <MoreStackNavigator.Navigator>\n    <MoreStackNavigator.Screen name=\"more-main\" component={MoreScreen} />\n    <MoreStackNavigator.Screen name=\"locations\" component={LocationListScreen} />\n    <MoreStackNavigator.Screen name=\"tasks\" component={TaskListScreen} />\n  </MoreStackNavigator.Navigator>\n);\n\nconst MainTabsNvaigator = createBottomTabNavigator<MainTabParamList>();\n\nconst MainTabs: React.FC = () => {\n  const theme = useTheme();\n  return (\n    <MainTabsNvaigator.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: theme.colors.primary,\n      }}\n    >\n      <MainTabsNvaigator.Screen\n        options={{\n          headerShown: false,\n          tabBarLabel: 'Days',\n          tabBarIcon: ({ focused }) => <Icon color={focused ? 'primary' : 'text'} name=\"check-square\" />,\n        }}\n        name=\"day\"\n        component={DayScreen}\n      />\n      <MainTabsNvaigator.Screen\n        options={{\n          headerShown: false,\n          tabBarLabel: 'Plan',\n          tabBarIcon: ({ focused }) => <Icon color={focused ? 'primary' : 'text'} name=\"check-square\" />,\n        }}\n        name=\"plan\"\n        component={PlanScreen}\n      />\n      <MainTabsNvaigator.Screen\n        options={{\n          headerShown: false,\n          tabBarLabel: 'More',\n          tabBarIcon: ({ focused }) => <Icon color={focused ? 'primary' : 'text'} name=\"more-vertical\" />,\n        }}\n        name=\"more\"\n        component={MoreStack}\n      />\n    </MainTabsNvaigator.Navigator>\n  );\n};\n\nconst RootNavigator = Platform.OS === 'web'\n  ? createStackNavigator<RootStackParamList>()\n  : createNativeStackNavigator<RootStackParamList>();\n\nconst Root: React.FC = () => (\n  <RootNavigator.Navigator screenOptions={{ headerShown: false, animationEnabled: true }}>\n    <RootNavigator.Group>\n      <RootNavigator.Screen name=\"main\" component={MainTabs} />\n    </RootNavigator.Group>\n    <RootNavigator.Group screenOptions={{ presentation: 'transparentModal' }}>\n      <RootNavigator.Screen name=\"add-task\" component={TaskAddScreen} />\n      <RootNavigator.Screen name=\"set-location\" component={LocationSetScreen} />\n      <RootNavigator.Screen name=\"set-override\" component={OverrideSetScreen} />\n    </RootNavigator.Group>\n  </RootNavigator.Navigator>\n);\n\nconst Router: React.FC = () => {\n  const theme = useTheme();\n  const baseTheme = useMemo(\n    () => DefaultTheme,\n    [],\n  );\n  const navigationTheme = useMemo(\n    () => ({\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        background: theme.colors.shade,\n        card: theme.colors.background,\n        text: theme.colors.text,\n      }\n    }),\n    [baseTheme, theme],\n  );\n  return (\n    <NavigationContainer theme={navigationTheme}>\n      <Root />\n    </NavigationContainer>\n  )\n};\n\nexport { Router };\n","import { registerRootComponent } from 'expo';\nimport './setup';\n\nimport { App } from './app';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n\n","import 'react-native-get-random-values';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useCallback } from 'react';\nimport { Setup } from './features/setup';\nimport { Router } from './ui/router';\nimport { Provider } from '@morten-olsen/ui';\n\nconst App: React.FC = () => {\n  const getTransit = useCallback(\n    async (from: any, to: any) => ({\n      to,\n      from,\n      time: 45,\n      usableTime: 0,\n    }),\n    [],\n  )\n  return (\n    <SafeAreaProvider>\n      <StatusBar />\n      <Provider>\n        <Setup getTransit={getTransit}>\n          <Router />\n        </Setup>\n      </Provider>\n    </SafeAreaProvider>\n  );\n};\n\nexport { App };\n"],"sourceRoot":""}